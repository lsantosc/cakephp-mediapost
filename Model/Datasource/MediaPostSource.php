<?PHP
App::import('Vendor', 'MediaPost.MapiClient');

class MediaPostSource extends DataSource
{

    /**
     * Description of datasource
     * @var string
     */
    public $description = "A datasource for the MediaPost API";

    /**
     * Instance o MapiClient
     * @var MapiClient
     */
    public $api;

    /**
     * @var array
     */
    public $config = array();

    /**
     * MediaPostSource constructor.
     * @param array $config
     * - Set the Datasource config
     * - Instance MapiClient
     */
    public function __construct(array $config)
    {
        $this->_setConfig($config);
        $this->api = new MapiClient($this->config['consumerKey'], $this->config['consumerSecret'], $this->config['token'], $this->config['tokenSecret']);
        parent::__construct($config);
    }

    /**
     * Set config
     * @param array $config
     */
    private function _setConfig(array $config)
    {
        if(Configure::check('MediaPost'))  $config = array_merge($config, Configure::read('MediaPost'));
        $this->config = $config;
    }

    /**
     * listSources
     * @param null $data
     * @return array|null
     */
    public function listSources($data = null)
    {
        return parent::listSources($data); // TODO: Change the autogenerated stub
    }


    /**
     * Describe
     * @param Model|string $model
     * @return array|null
     */
    public function describe($model)
    {
        return parent::describe($model);
    }

    /**
     * Read
     * @param Model $Model
     * @param array $queryData
     * @param null $recursive
     * @return array
     */
    public function read(Model $Model, $queryData = array(), $recursive = null)
    {
        $result = array();
        switch($Model->alias) {
            case 'MediaPostContact':
                $result = array($Model->alias => $this->_readContacts($queryData));
                break;
            case 'MediaPostList':
                $result = array($Model->alias => $this->_readLists($queryData));
                break;
            case 'MediaPostMessage':
                $result = array($Model->alias => $this->api->get("mensagem/listar"));
                break;
        }
        return $result;
    }

    /**
     * Create
     * @param Model $Model
     * @param null $fields
     * @param null $values
     * @return bool
     */
    public function create(Model $Model, $fields = null, $values = null)
    {
        $data = array_combine($fields, $values);
        $this->createAndUpdate($Model, $data);
        return true;
    }

    /**
     * Update
     * @param Model $Model
     * @param null $fields
     * @param null $values
     * @param null $conditions
     * @return bool
     */
    public function update(Model $Model, $fields = null, $values = null, $conditions = null)
    {
        $data = array_combine($fields, $values);
        $this->createAndUpdate($Model, $data);
        return true;
    }

    /**
     * Delete
     * @param Model $Model
     * @param null $conditions
     * @return bool
     */
    public function delete(Model $Model, $conditions = null)
    {
        return parent::delete($Model, $conditions);
    }


    /**
     * Make PUT|POST requests by Model->alias
     * @param Model $Model
     * @param array $data
     */
    private function createAndUpdate(Model $Model, array $data)
    {
        switch($Model->alias) {
            case 'MediaPostContact':
                $this->_saveContacts($data);
                break;
            case 'MediaPostList':
                $this->api->post('lista/salvar', $data);
                break;
            case 'MediaPostMessage':
                $this->_saveMessage($data);
                break;
        }
    }

    /**
     * Save Contacts in Media Post
     * @param $data
     * @return string
     */
    private function _saveContacts($data)
    {
        $save = array();
        $save['lista'] = $data['lista'];
        unset($data['lista']);
        $save['contato'] = array($data);
        unset($data);
        return $this->api->put("contato/salvar", $save);
    }

    /**
     * Create a Message to send in Media Post
     * @param $data
     * @return array|string
     */
    private function _saveMessage($data)
    {
        $save = array(
            'mensagem' => array(
                'assunto' => $data['assunto'],
                'html' => $data['mensagem'],
                'texto' => strip_tags($data['mensagem'])
            )
        );

        if(empty($data['pasta'])) $save['pasta'] = "Pasta PadrÃ£o";

        if (!empty($data['nome_remetente'])) {
            $save['remetente']['nome'] = $data['nome_remetente'];
            unset($data['nome_remetente']);
        }

        if (!empty($data['email_remetente'])) {
            $save['remetente']['email'] = $data['email_remetente'];
            unset($data['email_remetente']);
        }

        if(!empty($data['ganalytics'])) {
            $save['mensagem']['ganalytics'] = $data['ganalytics'];
            unset($data['ganalytics']);
        }

        return $this->api->put("mensagem/salvar", $save);
    }

    /**
     * Read Lists from Media Post
     * @param array $queryData
     * @return string
     */
    private function _readLists(array $queryData)
    {
        $result = $this->api->get("lista/all");

        if (!empty($queryData['conditions']['id'])){
            $result = $this->api->get("lista/cod/{$queryData['conditions']['id']}");
            return $result;
        }

        return $result;
    }

    /**
     * Read Contacts from Media Post
     * @param array $queryData
     * @return array|string
     */
    private function _readContacts(array $queryData)
    {
        if (!empty($queryData['conditions']['id'])) {
            return $this->api->get("contato/cod/{$queryData['conditions']['id']}");
        }

        if(!empty($queryData['conditions']['fields']) && $queryData['conditions']['fields'] === true) {
            return $this->api->get("contato/campos");
        }

        if (!empty($queryData['conditions']['email'])){
            return $this->api->get("contato/email/{$queryData['conditions']['email']}");
        }

        return array();
    }


}